// Code

#include <Arduino.h>
#include <WiFi.h>
#include <ESP_Mail_Client.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// WiFi
#define WIFI_SSID "Mondongo"
#define WIFI_PASSWORD "huevos12"

// SMTP
#define SMTP_HOST "smtp.gmail.com"
#define SMTP_PORT 465
#define AUTHOR_EMAIL "jaimicoperez769@gmail.com"
#define AUTHOR_PASSWORD "aziovlmtkjibfdse"
#define RECIPIENT_EMAIL "jaimicoperez769@gmail.com"

// Sensor humedad y rel√©
#define SENSOR_PIN 34
#define VALOR_SECO 4000
#define VALOR_HUMEDO 1200
#define RELAY_PIN 15  // <--- NUEVO pin del rel√© m√°s seguro

#define INTERVALO_ENVIO 600000  // 10 min
#define UMBRAL_ENCIENDE 70.0
#define UMBRAL_APAGA 85.0

SMTPSession smtp;
unsigned long ultimoEnvio = 0;
bool alertaActiva = false;
bool motobombaEncendida = false;
bool wifiConectado = false;

void smtpCallback(SMTP_Status status) {
  Serial.println(status.info());
  if (status.success()) {
    Serial.println("‚úÖ Correo enviado correctamente.");
    smtp.sendingResult.clear();
  } else {
    Serial.println("üîã Preparando env√≠o...");
  }
}

void enviarCorreo(float humedad) {
  Session_Config config;
  config.server.host_name = SMTP_HOST;
  config.server.port = SMTP_PORT;
  config.login.email = AUTHOR_EMAIL;
  config.login.password = AUTHOR_PASSWORD;

  SMTP_Message message;
  message.sender.name = F("ESP32");
  message.sender.email = AUTHOR_EMAIL;
  message.subject = F("‚ö†Ô∏è Alerta de Humedad Baja");
  message.addRecipient(F("Destinatario"), RECIPIENT_EMAIL);

  String cuerpo = "El porcentaje de humedad ha bajado.\n";
  cuerpo += "Est√° en ";
  cuerpo += String(humedad, 1);
  cuerpo += "%. Iniciando motobomba.";

  message.text.content = cuerpo;
  message.text.charSet = "us-ascii";
  message.text.transfer_encoding = Content_Transfer_Encoding::enc_7bit;

  if (!smtp.connect(&config)) {
    Serial.printf("‚ùå Error SMTP: %d, %s\n", smtp.statusCode(), smtp.errorReason().c_str());
    return;
  }

  if (!MailClient.sendMail(&smtp, &message)) {
    Serial.printf("‚ùå Error al enviar: %d, %s\n", smtp.statusCode(), smtp.errorReason().c_str());
  }
}

// üì§ Tarea en segundo plano para no bloquear el loop()
void tareaCorreo(void *param) {
  float humedad = *((float*)param);
  delete (float*)param;
  enviarCorreo(humedad);
  vTaskDelete(NULL);
}

void mostrarOLED(float humedad) {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);

  display.setCursor(0, 0);
  display.print("Humedad: ");
  display.print(humedad, 1);
  display.println(" %");

  display.setCursor(0, 16);
  display.print("Motobomba: ");
  display.println(motobombaEncendida ? "ENCENDIDA" : "APAGADA");

  display.setCursor(0, 32);
  display.print("WiFi: ");
  display.println(wifiConectado ? "Conectado" : "Desconectado");

  display.display();
}

void setup() {
  Serial.begin(115200);
  pinMode(SENSOR_PIN, INPUT);
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, HIGH);  // Apagar rel√© al inicio (HIGH = OFF si es l√≥gica inversa)

  // Pantalla
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("‚ùå No se detect√≥ la OLED");
    while (true);
  }
  display.clearDisplay();
  display.display();

  // WiFi
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Conectando WiFi");
  int intentos = 0;
  while (WiFi.status() != WL_CONNECTED && intentos < 30) {
    delay(300);
    Serial.print(".");
    intentos++;
  }
  wifiConectado = WiFi.status() == WL_CONNECTED;
  Serial.println(wifiConectado ? "\n‚úÖ WiFi conectado" : "\n‚ùå WiFi no conectado");

  smtp.debug(0);
  smtp.callback(smtpCallback);
}

void loop() {
  int valorBruto = analogRead(SENSOR_PIN);
  float humedad = map(valorBruto, VALOR_SECO, VALOR_HUMEDO, 0, 100);
  humedad = constrain(humedad, 0, 100);

  Serial.print("Humedad: ");
  Serial.print(humedad);
  Serial.println(" %");

  // Encender motobomba si humedad baja del umbral
  if (humedad < UMBRAL_ENCIENDE && !motobombaEncendida) {
    digitalWrite(RELAY_PIN, LOW);  // LOW activa si l√≥gica inversa
    motobombaEncendida = true;
    Serial.println("üîõ Rel√© ENCENDIDO (humedad < 70%)");

  } else if (humedad >= UMBRAL_APAGA && motobombaEncendida) {
    digitalWrite(RELAY_PIN, HIGH);  // HIGH apaga
    motobombaEncendida = false;
    Serial.println("üî¥ Rel√© APAGADO (humedad >= 85%)");
  }

  // Enviar correo si humedad < 70%
  unsigned long ahora = millis();
  if (humedad < UMBRAL_ENCIENDE) {
    if (!alertaActiva || ahora - ultimoEnvio >= INTERVALO_ENVIO) {
      float *humPtr = new float(humedad);
      xTaskCreate(tareaCorreo, "EnviarCorreo", 8192, humPtr, 1, NULL);
      ultimoEnvio = ahora;
      alertaActiva = true;
    }
  } else {
    alertaActiva = false;
  }

  // Mostrar en pantalla
  mostrarOLED(humedad);

  delay(5000);  // Leer cada 5 segundos
}
